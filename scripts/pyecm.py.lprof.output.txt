Timer unit: 1e-06 s

File: scripts/pyecm.py
Function: invert at line 76
Total time: 0.37386 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    76                                           	@profile
    77                                           	def invert(a, b):
    78                                           		'''Computes the inverse of a modulo b. b must be odd.
    79                                           
    80                                           Returns the inverse of a (mod b).'''
    81       330          662      2.0      0.2  		if a == 0 or b == 0:
    82                                           			return 0
    83                                           
    84       330          374      1.1      0.1  		truth = False
    85       330          370      1.1      0.1  		if a < 0:
    86                                           			truth = True
    87                                           			a = -a
    88                                           
    89       330          349      1.1      0.1  		b_orig = b
    90       330          299      0.9      0.1  		alpha = 1
    91       330          295      0.9      0.1  		beta = 0
    92                                           
    93       619          896      1.4      0.2  		while not a & 1:
    94       289          315      1.1      0.1  			if alpha & 1:
    95       274          377      1.4      0.1  				alpha += b_orig
    96       289          383      1.3      0.1  			alpha >>= 1
    97       289          319      1.1      0.1  			a >>= 1
    98                                           
    99       330          357      1.1      0.1  		if b > a:
   100       330          315      1.0      0.1  			a, b = b, a
   101       330          329      1.0      0.1  			alpha, beta = beta, alpha
   102                                           
   103     21408        25625      1.2      6.9  		while b != 0 and a != b:
   104     21078        22963      1.1      6.1  			a -= b
   105     21078        23388      1.1      6.3  			alpha -= beta
   106                                           
   107     62859        75412      1.2     20.2  			while not a & 1:
   108     41781        51038      1.2     13.7  				if alpha & 1:
   109     21165        24080      1.1      6.4  					alpha += b_orig
   110     41781        50731      1.2     13.6  				alpha >>= 1
   111     41781        46648      1.1     12.5  				a >>= 1
   112                                           			
   113     21078        23416      1.1      6.3  			if b > a:
   114     11335        11195      1.0      3.0  				a,b = b,a
   115     11335        10922      1.0      2.9  				alpha, beta = beta, alpha
   116                                           
   117       330          338      1.0      0.1  		if a == b:
   118       330          354      1.1      0.1  			a -= b
   119       330          359      1.1      0.1  			alpha -= beta
   120       330          336      1.0      0.1  			a, b = b, a
   121       330          331      1.0      0.1  			alpha, beta = beta, alpha
   122                                           
   123       330          414      1.3      0.1  		if a != 1:
   124         2            2      1.0      0.0  			return 0
   125                                           
   126       328          354      1.1      0.1  		if truth:
   127                                           			alpha = b_orig - alpha
   128                                           		
   129       328          314      1.0      0.1  		return alpha

File: scripts/pyecm.py
Function: double at line 431
Total time: 5.44946 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   431                                           @profile
   432                                           def double(p, n):
   433                                           	'''Doubles each point in the input list. Much like the add function, we take advantage of fast inversion.
   434                                           
   435                                           Returns the doubled list.'''
   436       265         2991     11.3      0.1  	inv = range(len(p))
   437                                           
   438    163150       147602      0.9      2.7  	for i in xrange(len(p)):
   439    162885       211481      1.3      3.9  		inv[i] = p[i][1] << 1
   440                                           
   441       265      2995595  11304.1     55.0  	inv = parallel_invert(inv, n)
   442                                           
   443       265          639      2.4      0.0  	if not isinstance(inv, list):
   444                                           		return inv
   445                                           
   446    163150       165683      1.0      3.0  	for i in xrange(len(p)):
   447    162885       176724      1.1      3.2  		x = p[i][0]
   448    162885       358302      2.2      6.6  		m = (x * x) % n
   449    162885       461493      2.8      8.5  		m = ((m + m + m + p[i][2]) * inv[i]) % n
   450    162885       432417      2.7      7.9  		p[i][0] = (m * m - x - x) % n
   451    162885       496263      3.0      9.1  		p[i][1] = (m * (x - p[i][0]) - p[i][1]) % n
   452                                           
   453       265          267      1.0      0.0  	return p

File: scripts/pyecm.py
Function: parallel_invert at line 538
Total time: 2.71484 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   538                                           @profile
   539                                           def parallel_invert(l, n):
   540                                           	'''Inverts all elements of a list modulo some number, using 3(n-1) modular multiplications and one inversion.
   541                                           
   542                                           Returns the list with all elements inverted modulo 3(n-1).'''
   543       330         2012      6.1      0.1  	l_ = l[:]
   544    224050       209823      0.9      7.7  	for i in xrange(len(l)-1):
   545    223720       548675      2.5     20.2  		l[i+1] = (l[i] * l[i+1]) % n
   546                                           	
   547       330       715918   2169.4     26.4  	inv = invert(l[-1], n)
   548       330          445      1.3      0.0  	if inv == 0:
   549         2          488    244.0      0.0  		return gcd(l[-1], n)
   550                                           
   551    222856       214503      1.0      7.9  	for i in xrange(len(l)-1, 0, -1):
   552    222528       518009      2.3     19.1  		l[i] = (inv * l[i-1]) % n
   553    222528       504313      2.3     18.6  		inv = (inv * l_[i]) % n
   554       328          340      1.0      0.0  	l[0] = inv
   555                                           
   556       328          319      1.0      0.0  	return l

